MODULE main
DEFINE 
    nrplayers := 2;
    m := 5;

VAR
    playerTurn: 0 .. 1; -- Index of which player's turn it is to choose a number.
    p0: player(m);
    p1: player(m);

ASSIGN
    init(playerTurn) := 0; -- Player 0 may start choosing.
    init(p0.hasTurn) := TRUE;
    init(p1.hasTurn) := FALSE;

    -- Define which player's turn it is. TODO check if possible to simplify using TRANS.
    next(playerTurn) := case
        playerTurn = 0 & p0.action = chose: 1;
        playerTurn = 0: 0;
        playerTurn = 1 & p1.action = chose: 0;
        playerTurn = 1: 1;
    esac;

    -- TODO possibly use TRANS to simplify
    next(p0.hasTurn) := case
        next(playerTurn) = 0: TRUE;
        TRUE: FALSE;
    esac;

    next(p1.hasTurn) := case
        next(playerTurn) = 1: TRUE;
        TRUE: FALSE;
    esac;

    -- Define when the players can roll, such that they only roll AFTER the player has chosen.
    next(p0.mayRoll) := case
        playerTurn = 0 & p0.action = chose: TRUE;
        playerTurn = 1 & p1.action = chose: TRUE;
        TRUE: FALSE;
    esac;

    next(p1.mayRoll) := case
        playerTurn = 1 & p1.action = chose: TRUE;
        playerTurn = 0 & p0.action = chose: TRUE;
        TRUE: FALSE;
    esac;


MODULE player(nrdice)
VAR
        dice: 0 .. nrdice; -- The number of dice the player has left.
        eyes: array 0 .. nrdice of 1 .. 6; -- The values of all the dice, changes after each roll.
        choice: 1 .. 6; -- Choice made by the player.
        hasTurn: boolean; -- To know if the current player may chose
        mayRoll: boolean; -- To know if the current player can roll their dice.
        action: {waiting, choosing, chose, rolling, done, lost};
        points: 0 .. 100; -- todo upperbound
        i: 0 .. nrdice; -- Probably needed for counting points, currently unused.

ASSIGN
        init(dice) := nrdice; -- Initial number of dice.
        init(action) := waiting; -- Initially all players are waiting.
        init(mayRoll) := FALSE; -- Initially no players may roll their dice.
        init(points) := 0; -- Initially all players have 0 points.
        init(i) := 0; -- Used as a counter for indexing the `eyes` array.
        
        next(dice) := dice; -- TODO decrement when applicable.

        -- When the player is choosing, undeterministically choose a new number, otherwise keep unaltered.
        next(choice) := case
            next(action) = choosing: 1 .. 6;
            TRUE: choice;
        esac;

        -- Define the next action.
        next(action):= case
            dice = 0: lost;
            action = choosing: chose;
            action = chose & mayRoll: rolling;
            action = chose: chose;
            action = waiting & mayRoll = TRUE: rolling;
            action = waiting & hasTurn = TRUE: choosing;
            action = waiting: waiting;
            action = rolling: done;
            action = done: waiting;
			action = lost: lost;
        esac;

        -- Increment the array index, modulo the number of dice that are left. TODO only update when in certain action state.
        next(i) := case
            dice = 0: i;
            TRUE: (i + 1) mod dice;
        esac;

TRANS
    -- Only when not rolling the dice do the current dice remain unaltered, otherwise they can do whathever they want.
    -- I.e. when rolling, the eyes get updated undeterministically.
    action != rolling -> (next(eyes) = eyes);
