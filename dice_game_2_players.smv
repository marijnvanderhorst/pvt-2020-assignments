MODULE main
VAR
    playerTurn: 0 .. nrplayers - 1; -- Index of which player's turn it is to choose a number.
    numberChosen: boolean; -- Whether or not a number has been chosen in the current round.
    p0: player(0, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints);
    p1: player(1, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints);
    p2: player(2, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints);
    p3: player(3, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints);
    p4: player(4, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints);
DEFINE
    -- The total number of players in the game.
    nrplayers := 5;
    -- The smallest number of points of all players.
    smallestPoints := min(p0.points, min(p1.points, min(p2.points, min(p3.points, p4.points))));
    -- Whether there are still at least 2 players left.
    stillPlaying := count(p0.action = lost, p1.action = lost, p2.action = lost, p3.action = lost, p4.action = lost) <= nrplayers - 2;
    -- The number of points that the player whose turn it is has.
    choosingPlayerPoints := case
        playerTurn = 0: p0.points;
        playerTurn = 1: p1.points;
        playerTurn = 2: p2.points;
        playerTurn = 3: p3.points;
        playerTurn = 4: p4.points;
    esac;

-- Initially, no number has been chosen.
INIT numberChosen = FALSE;

-- The chosen number is the same for all players, during a round.
TRANS next(p0.choice) = next(p1.choice);
TRANS next(p0.choice) = next(p2.choice);
TRANS next(p0.choice) = next(p3.choice);
TRANS next(p0.choice) = next(p4.choice);

-- Enable the line below to make sure one player always wins.
--JUSTICE (count(p0.dice = 0, p1.dice = 0, p2.dice = 0, p3.dice = 0) = 3);

-- Verify that no deadlock occurs.
SPEC AG EX TRUE;
-- It is possible for the game to end.
SPEC EF stillPlaying = FALSE;
-- Always one player loses eventually (and thus the other player wins).
--SPEC AF (p0.action = lost | p1.action = lost | p2.action = lost | p3.action = lost);
-- Never all players lose at the same time (and thus at least one player always wins).
SPEC AG (p0.action != lost | p1.action != lost | p2.action != lost | p3.action != lost | p4.action != lost);
-- When the game is still going, always exactly one of the players has the turn.
SPEC AG stillPlaying -> (count(p0.hasTurn, p1.hasTurn, p2.hasTurn, p3.hasTurn, p4.hasTurn) = 1);
-- When the players are rolling their dice, they do check against the same chosen number.
SPEC AG ((p0.action = rolling | p1.action = rolling | p2.action = rolling | p3.action = rolling | p4.action = rolling) -> p0.choice = p1.choice & p1.choice = p2.choice & p2.choice = p3.choice, p3.choice = p4.choice);
-- When a player is rolling, none of the players is currently choosing a number.
SPEC AG (p0.action = rolling | p1.action = rolling | p2.action = rolling | p3.action = rolling | p4.action = rolling -> p0.action != choosing & p1.action != choosing & p2.action != choosing & p3.action != choosing & p4.action != choosing);
-- If one of the players has chosen a number, all players will be rolling at some point, unless they have already lost.
SPEC AG (p0.action = chose | p1.action = chose | p2.action = chose | p3.action = chose | p3.action = chose -> AF((p0.action = rolling | p0.action = lost) & (p1.action = rolling | p1.action = lost) & (p2.action = rolling | p2.action = lost) & (p3.action = rolling | p3.action = lost) & (p4.action = rolling | p4.action = lost)));
-- It is possible for all players to have the same number of points at the end of a round.
SPEC EF (p0.action = done & p1.action = done & p2.action = done & p3.action = done & p4.action = done & p0.points = p1.points & p1.points = p2.points & p2.points = p3.points & p3.points = p4.points);
-- It is possible for players to not have the same number of points at the end of a round.
SPEC EF (p0.action = done & p1.action = done & p2.action = done & p3.action = done & p4.action = done & p0.points != p1.points & p1.points != p2.points & p2.points != p3.points & p3.points != p4.points);
-- It is possible for players to roll the same number of eyes.
SPEC EF (p0.action = rolling & p1.action = rolling & p2.action = rolling & p3.action = rolling & p4.action = rolling & p0.eyes = p1.eyes & p1.eyes = p2.eyes & p2.eyes = p3.eyes & p3.eyes = p4.eyes);
-- It is possible for players to roll different number of eyes.
SPEC EF (p0.action = rolling & p1.action = rolling & p2.action = rolling & p3.action = rolling & p4.action = rolling & p0.eyes != p1.eyes & p1.eyes != p2.eyes & p2.eyes != p3.eyes & p3.eyes != p4.eyes);
-- Verify that the ordering of which player is choosing is fair.
-- Part after AX is equivalent to A[p0.action != choosing W p1.action = choosing | p1.action = lost].
LTLSPEC G (p0.action = choosing -> X ((p1.action = choosing | p1.action = lost) V p0.action != choosing));
LTLSPEC G (p1.action = choosing -> X ((p2.action = choosing | p2.action = lost) V p1.action != choosing));
LTLSPEC G (p2.action = choosing -> X ((p3.action = choosing | p3.action = lost) V p2.action != choosing));
LTLSPEC G (p3.action = choosing -> X ((p4.action = choosing | p4.action = lost) V p3.action != choosing));
LTLSPEC G (p4.action = choosing -> X ((p0.action = choosing | p0.action = lost) V p4.action != choosing));

MODULE player(id, nrplayers, playerTurn, numberChosen, smallestPoints, stillPlaying, choosingPlayerPoints)
DEFINE
    nrdice := 5;
VAR
    dice: 0 .. nrdice; -- The number of dice the player has left.
    eyes: 1 .. 6; -- The value of the current die, changes after each roll.
    choice: 1 .. 6; -- Choice made by the player whose turn it is.
    action: {waiting, choosing, chose, rolling, done, lost}; -- What the player is currently doing.
    points: 0 .. nrdice; -- The number of points that the player has in the current round.
    i: 0 .. (nrdice - 1); -- Internal counter.
DEFINE
    hasTurn := stillPlaying & playerTurn = id; -- To know if the current player may choose
    mayRoll := stillPlaying & action != lost & numberChosen; -- To know if the current player can roll their dice.

-- This player gives the turn to the next player at the end of the round.
TRANS (hasTurn & (action = done | action = lost)) -> next(playerTurn) = (playerTurn + 1) mod nrplayers;
-- Otherwise this player keeps the turn.
TRANS (hasTurn & action != done & action != lost) -> next(playerTurn) = playerTurn;

-- When the round is done, reset numberChosen to false.
TRANS next(action) = done -> next(numberChosen) = FALSE;
-- When this player has chosen a number, set numberChosen to true.
TRANS next(action) = chose -> next(numberChosen = TRUE);
-- Otherwise the numberChosen remains the same, unless this player may not choose, then the other player decides.
TRANS (hasTurn & next(action) != done & next(action) != chose) -> next(numberChosen) = numberChosen;

-- Only when not rolling the dice do the current dice remain unaltered, otherwise they can do whathever they want.
-- I.e. when rolling, the eyes get updated undeterministically.
TRANS next(action) != rolling -> (next(eyes) = eyes);

ASSIGN
    init(dice) := nrdice; -- Initial number of dice.
    init(action) := waiting; -- Initially all players are waiting.
    init(points) := 0; -- Initially all players have 0 points.
    init(i) := 0; -- Used as a counter during rolling.
    
    -- When the player is choosing, undeterministically choose a new number, otherwise keep unaltered.
    next(choice) := case
        action != choosing & hasTurn = TRUE: choice;
        TRUE: 1 .. 6;
    esac;

    -- Define the next action.
    next(action):= case
        next(dice) = 0: lost;
        action = choosing: chose;
        action = chose & mayRoll: rolling;
        action = chose: chose;
        action = waiting & mayRoll = TRUE: rolling;
        action = waiting & hasTurn = TRUE: choosing;
        action = waiting: waiting;
        action = rolling & i = (nrdice - 1): done;
        action = rolling: rolling;
        action = done: waiting;
        action = lost: lost;
    esac;

    -- Increment the internal counter when we are rolling.
    next(i) := case
        dice = 0: 0;
        action != rolling: 0;
        TRUE: (i + 1) mod nrdice;
    esac;

    -- Calculate the number of points of the player.
    next(points) := case
        next(action) = waiting | next(action) = lost: 0;
        points = nrdice: nrdice;
        action = rolling & i < dice & eyes = choice: (points + 1);
        TRUE: points;
    esac;

    -- Determine how many dice the player has left.
    next(dice) := case
        dice = 0: 0;
        -----------------[ Start original rules ]-----------------
        action != done | !hasTurn: dice;
        points = smallestPoints: dice - 1;
        -----------------[ End original rules ]-------------------
        -----------------[ Start adapted rules ]------------------
        --action != done: dice;
        --hasTurn & points = smallestPoints: dice -1;
        --!hasTurn & points < choosingPlayerPoints & points = smallestPoints: dice -1;
        -----------------[ End adapted rules ]--------------------
        TRUE: dice;
    esac;

-- Any player could lose the game.
SPEC EF action = lost;
-- Any player could win the game, i.e. it is possible to never lose the game.
SPEC EF AG action != lost;
-- When a player is choosing he must always eventually be done so.
SPEC AG (action = choosing -> AF(action = chose));
-- When a player has the turn and is waiting, he must always eventually be choosing a number.
SPEC AG (hasTurn & action = waiting -> AF(action = choosing));
-- When a player has chosen, he must always eventually be rolling his dice.
SPEC AG (action = chose -> AF(action = rolling));
-- When a player is rolling, he must always eventually have lost the game, or be waiting for a next round.
SPEC AG (action = rolling -> AF(action = lost | action = waiting));
-- When a player may roll, he must always eventually be rolling.
SPEC AG(mayRoll -> AF(action = rolling));
-- Player may only be choosing (or have chosen) when he has the turn.
SPEC AG ((action = choosing | action = chose) -> hasTurn);
-- Whenever a player has lost, he will have lost forever.
SPEC AG (action = lost -> AG action = lost);
-- A player cannot have any points while waiting or choosing a number.
SPEC AG (action = waiting | action = choosing | action = chose -> points = 0);
-- When a player has no dice left, eventually he loses.
SPEC AG (dice = 0 -> AF action = lost);
-- When a player is rolling their dice, he must be allowed to roll.
SPEC AG (action = rolling -> mayRoll);
-- A player can have at most as many points as he has dice in that round.
SPEC AG points <= dice;
-- It is possible to get the maximum number of points.
SPEC EF (points = nrdice);
-- It is possible to get any number of points.
SPEC EF (points = 0) & EF (points = 1) & EF (points = 2) & EF (points = 3) & EF (points = 4);
-- While a player is rolling, the choice never changes.
SPEC AG (action = rolling & choice = 1 -> A[choice = 1 U action != rolling]);
SPEC AG (action = rolling & choice = 2 -> A[choice = 2 U action != rolling]);
SPEC AG (action = rolling & choice = 3 -> A[choice = 3 U action != rolling]);
SPEC AG (action = rolling & choice = 4 -> A[choice = 4 U action != rolling]);
SPEC AG (action = rolling & choice = 5 -> A[choice = 5 U action != rolling]);
SPEC AG (action = rolling & choice = 6 -> A[choice = 6 U action != rolling]);
-- When a player has the turn during a round, he will eventually not have the turn anymore.
SPEC AG (hasTurn -> AF !hasTurn);
